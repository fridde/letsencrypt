<?php

use League\CLImate\CLImate;
use Imbrish\LetsEncrypt\Command;
use Symfony\Component\Yaml\Yaml;
use Symfony\Component\Yaml\Exception\ParseException;

// define exit codes

const EX_SUCCESS               = 0;
const EX_AUTOLOAD_NOT_FOUND    = 1;
const EX_OPENSSL_NOT_FOUND     = 2;
const EX_SAPI_INVALID          = 3;
const EX_CONFIG_NOT_FOUND      = 4;
const EX_CONFIG_PARSING_ERROR  = 5;
const EX_PROCESSING_ERROR      = 6;
const EX_CONFIG_INVALID        = 7;
const EX_AUTOLOAD_OUTDATED     = 8;
const EX_UAPI_NOT_FOUND        = 9;
const EX_WINDOWS_NOT_SUPPORTED = 10;
const EX_NAMESERVER_HACK_ERROR = 11;
const EX_UAPI_CALL_FAILED      = 12;
const EX_UNKNOWN_ERROR         = 255;

// initialize config and define paths

$config = [];

$config['base'] = realpath(__DIR__ . '/..');
$config['storage'] = $config['base'] . '/storage';
$config['error_log'] = $config['storage'] . '/error.log';

// check and require composer autoloader

$message = "You need to install the composer dependencies, please run 'composer install'!" . PHP_EOL;

if (! file_exists($config['base'] . '/vendor/autoload.php')) {
    echo $message;
    exit(EX_AUTOLOAD_NOT_FOUND);
}

$stored = file_exists($path = $config['storage'] . '/composer.hash') ? file_get_contents($path) : false;
$actual = file_exists($path = $config['base'] . '/composer.json') ? md5(file_get_contents($path)) : false;

if (! $stored || $stored !== $actual) {
    echo $message;
    exit(EX_AUTOLOAD_OUTDATED);
}

require $config['base'] . '/vendor/autoload.php';

// initialize CLImate

$climate = new CLImate;

// correctly detect ANSI support when using shell on Windows

if (getenv('ANSICON') !== false) {
    $climate->forceAnsiOn();
}

// check the environment

if (! in_array(PHP_SAPI, ['cli', 'phpdbg'], true)) {
    $climate->to('error')->error('Please run this script on the command line!');
    exit(EX_SAPI_INVALID);
}

if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {
    $climate->to('error')->error('Running this script on Windows is not supported!');
    exit(EX_WINDOWS_NOT_SUPPORTED);
}

if (! extension_loaded('openssl')) {
    $climate->to('error')->error('Please enable OpenSSL extension in your php.ini!');
    exit(EX_OPENSSL_NOT_FOUND);
}

if (! $uapi = exec('which uapi 2>/dev/null')) {
    $climate->to('error')->error('UAPI access to cPanel is not available!');
    exit(EX_UAPI_NOT_FOUND);
}

define('UAPI_BINARY', $uapi);

// register custom error handler

ini_set('display_errors', '1');

error_reporting(E_ALL);

set_error_handler(function ($severity, $message, $file, $line, $context) {
    global $climate;

    if (! (error_reporting() & $severity)) {
        return false;
    }

    static $labels = [
        E_ERROR             => 'Error',
        E_WARNING           => 'Warning',
        E_PARSE             => 'Parse',
        E_NOTICE            => 'Notice',
        E_CORE_ERROR        => 'Core Error',
        E_CORE_WARNING      => 'Core Warning',
        E_COMPILE_ERROR     => 'Compile Error',
        E_COMPILE_WARNING   => 'Compile Warning',
        E_USER_ERROR        => 'User Error',
        E_USER_WARNING      => 'User Warning',
        E_USER_NOTICE       => 'User Notice',
        E_STRICT            => 'Strict',
        E_RECOVERABLE_ERROR => 'Recoverable Error',
        E_DEPRECATED        => 'Deprecated',
        E_USER_DEPRECATED   => 'User Deprecated',
    ];

    $label = $labels[$severity] ?: "Error ($severity)";

    $climate->to('error')->shout("$label: $message in $file on line $line");

    return true;
});

// define and parse arguments

$climate->description('Automatic issuing and renewal of Let\'s Encrypt SSL certificates on shared hostings');

$climate->arguments->add([
    'notify' => [
        'prefix'       => 'n',
        'longPrefix'   => 'notify',
        'description'  => 'Send email notification about errors or issued certificates',
    ],
    'config' => [
        'prefix'       => 'c',
        'longPrefix'   => 'config',
        'description'  => 'Name of the configuration file including extension',
        'defaultValue' => 'config.yml',
    ],
    'verbose' => [
        'prefix'       => 'v',
        'longPrefix'   => 'verbose',
        'description'  => 'Enable verbose output',
        'noValue'      => true,
    ],
    'help' => [
        'prefix'       => 'h',
        'longPrefix'   => 'help',
        'description'  => 'Display this help message',
        'noValue'      => true,
    ],
    'certificates' => [
        'description'  => 'Common names of certificates to issue and install',
    ],
]);

$climate->arguments->parse();

// extract certificates argument manually to allow multiple names

$skipNextAfter = [];

foreach ($climate->arguments->all() as $argument) {
    if ($argument->noValue()) {
        continue;
    }

    if ($prefix = $argument->prefix()) {
        $skipNextAfter[] = '-'.$prefix;
    }

    if ($prefix = $argument->longPrefix()) {
        $skipNextAfter[] = '--'.$prefix;
    }
}

$config['only'] = [];
$skipNext = false;

for ($i = 1; $i < count($argv); $i++) {
    if (in_array($argv[$i], $skipNextAfter)) {
        $skipNext = true;
    }
    else if ($argv[$i] === '--') {
        $config['only'] = [];
        $skipNext = false;
    }
    else if ($skipNext) {
        $skipNext = false;
    }
    else if (substr($argv[$i], 0, 1) !== '-') {
        $config['only'][] = $argv[$i];
    }
}

// fix incorrect values of options followed by another option

foreach ($climate->arguments->all() as $argument) {
    if (! $argument->hasPrefix() || $argument->noValue()) {
        continue;
    }

    if (substr($argument->value(), 0, 1) === '-') {
        $argument->setValue(null);
    }
}

// display the help message

if ($climate->arguments->defined('help')) {
    $climate->usage();
    exit(EX_SUCCESS);
}

// load configuration

$name = $climate->arguments->get('config');
$config['source'] = $config['base'] . '/' . $name;

if (! is_file($config['source'])) {
    $climate->to('error')->error("Config file '$name' could not be found!");
    exit(EX_CONFIG_NOT_FOUND);
}

try {
    $yaml = Yaml::parse(file_get_contents($config['source']));
    $config = array_merge($yaml, $config);
} catch (ParseException $e) {
    $climate->to('error')->error('There was an error when parsing the configuration file!');
    exit(EX_CONFIG_PARSING_ERROR);
}

// update config from arguments

$config['notify_enabled'] = $climate->arguments->defined('notify');
$config['notify_email'] = $climate->arguments->get('notify') ?: $config['notify'];

$config['verbose_enabled'] = $climate->arguments->defined('verbose');

// check the configuration

try {
    \Kelunik\AcmeClient\resolveServer($config['server']);
} catch (InvalidArgumentException $e) {
    $climate->to('error')->error('Invalid server, please specify a valid shortcut or full URL!');
    exit(EX_CONFIG_INVALID);
}

if (! $config['certificates']) {
    $climate->to('error')->error('No certificates defined, please check the config!');
    exit(EX_CONFIG_INVALID);
}

if (! $config['email']) {
    $climate->to('error')->error('Registration email is missing, please check the config!');
    exit(EX_CONFIG_INVALID);
}

if ($config['notify_enabled'] && ! $config['notify_email']) {
    $climate->to('error')->error("Notification email is missing, please check the config or provide value for '--notify' option!");
    exit(EX_CONFIG_INVALID);
}

// define certificate storage path

$server = \Kelunik\AcmeClient\resolveServer($config['server']);
$dir = \Kelunik\AcmeClient\serverToKeyname($server);

$config['certs'] = $config['storage'] . '/certs/' . $dir;

// setup the Command class

Command::$config = $config;
Command::$climate = $climate;

Command::$aliases = [
    'acme'  => [
        PHP_BINARY,
        $config['base'] . '/bin/acme',
    ],
    'uapi' => [
        UAPI_BINARY,
        'SSL',
        'install_ssl',
    ],
];

// print complete config for debugging

if ($config['verbose_enabled']) {
    $climate->whisper('Complete configuration: ' . json_encode($config, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE));
}

// insert custom nameserver for 'acme issue' command
// insert or replace nameserver if defined, remove otherwise

$path = $config['base'] . '/vendor/kelunik/acme-client/src/Commands/Issue.php';
$search = '/(?<=\\\Amp\\\Dns\\\resolve\(\$domain, \[)(\s*)(?:"server" => ".*",\s*)?(?="types" =>)/';
$replace = '$1' . ($config['nameserver'] ? '"server" => "' . $config['nameserver'] . '",$1' : '');

$content = preg_replace($search, $replace, file_get_contents($path), -1, $count);

if (! $count) {
    $climate->to('error')->error("Could not replace nameserver used by 'acme issue' command.");
    exit(EX_NAMESERVER_HACK_ERROR);
}

file_put_contents($path, $content);

// register a certification account

Command::exec('acme', [
    'setup',
    '--server'  => $config['server'],
    '--storage' => $config['storage'],
    '--email'   => $config['email'],
]);

if (Command::$result != EX_SUCCESS) {
    reportErrorAndExit('Failed to setup ACME client.');
}

// check, issue and setup certificates

$notifications = [];
$allDomains = [];

foreach ((array) $config['certificates'] as $certificate) {

    // extract domain paths and names, we need to pass a path for every passed domain
    // to avoid mixing things up when issue command will use last path for remaining domains

    $domainsMap = [];

    foreach ((array) $certificate['domains'] as $path => $names) {
        foreach ((array) $names as $name) {
            $domainsMap[$name] = $config['home'] . $path;
        }
    }

    $domainNames = array_keys($domainsMap);
    $domainPaths = array_values($domainsMap);

    $allDomains += $domainNames;

    // skip if domains omitted in the certificates argument

    if ($config['only'] && ! array_intersect($domainNames, $config['only'])) {
        continue;
    }

    // extract certificate meta

    if (! $domainNames) {
        $climate->to('error')->error('Domains for the certificate are missing, please check the config!');
        exit(EX_CONFIG_INVALID);
    }

    $name = $domainNames[0];
    $domains = implode(', ', $domainNames);

    $path = $config['certs'] . '/' . $name;

    $climate->info("Processing certificate $name ($domains)...");

    // check whether certificate should be renewed

    Command::exec('acme', [
        'check',
        '--server'  => $config['server'],
        '--storage' => $config['storage'],
        '--name'    => $name,
        '--ttl'     => $config['renew'],
        '--names'   => implode(',', $domainNames),
    ]);

    if (Command::$result == EX_UNKNOWN_ERROR) {
        reportErrorAndExit("Error when checking certificate $name.");
    }

    // issue new certificate

    if (Command::$result == EX_SUCCESS) {
        $climate->info("Certificate still valid for domains: $domains.");
    }
    else {
        Command::exec('acme', [
            'issue',
            '--server'  => $config['server'],
            '--storage' => $config['storage'],
            '--domains' => implode(':', $domainNames),
            '--path'    => implode(':', $domainPaths),
            '--bits'    => $certificate['bits'],
        ]);

        if (Command::$result != EX_SUCCESS) {
            removeDirectory($path);
            reportErrorAndExit("Error when issuing certificate $name.");
        }

        // remove challenge directories only when command succeeds

        foreach (array_unique($domainPaths) as $dir) {
            removeDirectory($dir . '/.well-known');
        }

        // ensure installation of newly issued certificate

        foreach (glob($path . '/installed.*') as $marker) {
            unlink($marker);
        }

        $climate->info(
            $notifications[] = "Certificate issued for domains: $domains."
        );
    }

    // read certificate files

    $certContent = file_get_contents($path . '/cert.pem');
    $keyContent = file_get_contents($path . '/key.pem');
    $chainContent = file_get_contents($path . '/chain.pem');

    // install certificate in cpanel for corresponding domains without www prefix

    $installDomains = array_map(function ($domain) {
        return strtolower(substr($domain, 0, 4)) === 'www.' ? substr($domain, 4) : $domain;
    }, $domainNames);

    if (is_array($whitelist = $config['install']['whitelist'])) {
        $installDomains = array_intersect($installDomains, $whitelist);
    }

    if (is_array($blacklist = $config['install']['blacklist'])) {
        $installDomains = array_diff($installDomains, $blacklist);
    }

    $skippedDomains = [];
    $installedDomains = [];

    foreach (array_unique($installDomains) as $domain) {
        if (file_exists($path . '/installed.' . $domain)) {
            $skippedDomains[] = $domain;
            continue;
        }

        Command::exec('uapi', [
            'domain'   => $domain,
            'cert'     => urlencode($certContent),
            'key'      => urlencode($keyContent),
            'cabundle' => urlencode($chainContent),
        ]);

        if (Command::$result == EX_UAPI_CALL_FAILED && strpos($server, 'acme-staging.api.letsencrypt.org')) {
            reportErrorAndExit("Error when installing certificate for $domain, could not install certificate issued by staging server.");
        }

        if (Command::$result != EX_SUCCESS) {
            reportErrorAndExit("Error when installing certificate for $domain.");
        }

        $installedDomains[] = $domain;

        // skip installing same certificate for same domain again in the future

        if (file_exists($path)) {
            touch($path . '/installed.' . $domain);
        }
    }

    if ($skippedDomains = implode(', ', $skippedDomains)) {
        $climate->info("Certificate previously installed for domains: $skippedDomains.");
    }

    if ($installedDomains = implode(', ', $installedDomains)) {
        $climate->info(
            $notifications[] = "Certificate installed for domains: $installedDomains."
        );
    }
}

if ($missing = implode(', ', array_diff($config['only'], $allDomains))) {
    $climate->to('error')->error("No certificates configured for domains: $missing!");
    exit(EX_CONFIG_INVALID);
}

if ($notifications) {
    sendNotification('New certificates were issued and/or installed.', implode(PHP_EOL, $notifications));
}
else {
    $climate->info('No certificates were issued and/or installed.');
}

exit(EX_SUCCESS);
